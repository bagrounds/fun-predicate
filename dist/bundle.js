(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){funPredicate=require("../src")},{"../src":33}],2:[function(require,module,exports){var pSlice=Array.prototype.slice;var objectKeys=require("./lib/keys.js");var isArguments=require("./lib/is_arguments.js");var deepEqual=module.exports=function(actual,expected,opts){if(!opts)opts={};if(actual===expected){return true}else if(actual instanceof Date&&expected instanceof Date){return actual.getTime()===expected.getTime()}else if(!actual||!expected||typeof actual!="object"&&typeof expected!="object"){return opts.strict?actual===expected:actual==expected}else{return objEquiv(actual,expected,opts)}};function isUndefinedOrNull(value){return value===null||value===undefined}function isBuffer(x){if(!x||typeof x!=="object"||typeof x.length!=="number")return false;if(typeof x.copy!=="function"||typeof x.slice!=="function"){return false}if(x.length>0&&typeof x[0]!=="number")return false;return true}function objEquiv(a,b,opts){var i,key;if(isUndefinedOrNull(a)||isUndefinedOrNull(b))return false;if(a.prototype!==b.prototype)return false;if(isArguments(a)){if(!isArguments(b)){return false}a=pSlice.call(a);b=pSlice.call(b);return deepEqual(a,b,opts)}if(isBuffer(a)){if(!isBuffer(b)){return false}if(a.length!==b.length)return false;for(i=0;i<a.length;i++){if(a[i]!==b[i])return false}return true}try{var ka=objectKeys(a),kb=objectKeys(b)}catch(e){return false}if(ka.length!=kb.length)return false;ka.sort();kb.sort();for(i=ka.length-1;i>=0;i--){if(ka[i]!=kb[i])return false}for(i=ka.length-1;i>=0;i--){key=ka[i];if(!deepEqual(a[key],b[key],opts))return false}return typeof a===typeof b}},{"./lib/is_arguments.js":3,"./lib/keys.js":4}],3:[function(require,module,exports){var supportsArgumentsClass=function(){return Object.prototype.toString.call(arguments)}()=="[object Arguments]";exports=module.exports=supportsArgumentsClass?supported:unsupported;exports.supported=supported;function supported(object){return Object.prototype.toString.call(object)=="[object Arguments]"}exports.unsupported=unsupported;function unsupported(object){return object&&typeof object=="object"&&typeof object.length=="number"&&Object.prototype.hasOwnProperty.call(object,"callee")&&!Object.prototype.propertyIsEnumerable.call(object,"callee")||false}},{}],4:[function(require,module,exports){exports=module.exports=typeof Object.keys==="function"?Object.keys:shim;exports.shim=shim;function shim(obj){var keys=[];for(var key in obj)keys.push(key);return keys}},{}],5:[function(require,module,exports){(function(){"use strict";var curry=require("fun-curry");module.exports=curry(apply);function apply(args,f){return f.apply(null,args)}})()},{"fun-curry":15}],6:[function(require,module,exports){(()=>{"use strict";const curry=require("fun-curry");const{inputs:inputs,output:output}=require("guarded");const id=x=>x;const keys=Object.keys;const values=o=>keys(o).map(k=>o[k]);const oMap=(f,o)=>keys(o).reduce((r,k)=>{r[k]=f(o[k]);return r},{});const oAp=(fs,o)=>keys(o).reduce((r,k)=>{r[k]=(fs[k]||id)(o[k]);return r},{});const all=as=>as.reduce((a,b)=>a&&b,true);const compose=f=>g=>x=>f(g(x));const typeOf=t=>x=>typeof x===t;const any=()=>true;const bool=typeOf("boolean");const integer=subject=>num(subject)&&Math.floor(subject)===subject&&Math.abs(subject)!==Infinity;const num=typeOf("number");const string=typeOf("string");const fun=typeOf("function");const instanceOf=(constructor,subject)=>subject instanceof constructor;const array=curry(instanceOf)(Array);const arrayOf=(predicate,subject)=>array(subject)&&all(subject.map(x=>predicate(x)));const vector=(length,subject)=>array(subject)&&subject.length===length;const vectorOf=(length,predicate,subject)=>vector(length,subject)&&arrayOf(predicate,subject);const tuple=(elements,subject)=>vector(elements.length,subject)&&all(elements.map((p,i)=>p(subject[i])));const matrix=subject=>array(subject)&&subject.length>0&&arrayOf(curry(vector)(subject[0].length),subject);const matrixOf=(predicate,subject)=>matrix(subject)&&arrayOf(curry(vectorOf)(subject[0].length,predicate),subject);const object=subject=>typeOf("object")(subject)&&subject!==null;const objectOf=(predicate,subject)=>object(subject)&&all(values(subject).map(v=>predicate(v)));const hasFields=(fields,subject)=>object(subject)&&keys(fields).reduce((r,k)=>r&&fields[k](subject[k]),true);const record=(fields,subject)=>hasFields(fields,subject)&&vector(keys(fields).length,keys(subject));const pojo=subject=>object(subject)&&Object.getPrototypeOf(subject)===Object.prototype;const regExp=curry(instanceOf)(RegExp);const member=(equal,set,subject)=>set.reduce((a,b)=>a||equal(b,subject),false);const distinct=(equal,subject)=>subject.length<2||!member(equal,subject.slice(1),subject[0])&&distinct(equal,subject.slice(1));const subset=(equal,set,subject)=>!subject.length||subject.length<=set.length&&!member(equal,subject.slice(1),subject[0])&&member(equal,set,subject[0])&&subset(equal,set,subject.slice(1));const partition=(equal,set,subject)=>subject.reduce((a,b)=>a.concat(b),[]).length===set.length&&subset(equal,set,subject.reduce((a,b)=>a.concat(b),[]));const nPartition=(equal,n,set,subject)=>subject.length===n&&partition(equal,set,subject);const api={bool:bool,num:num,string:string,object:object,pojo:pojo,array:array,vector:vector,matrix:matrix,fun:fun,record:record,hasFields:hasFields,tuple:tuple,objectOf:objectOf,arrayOf:arrayOf,vectorOf:vectorOf,matrixOf:matrixOf,regExp:regExp,instanceOf:instanceOf,any:any,member:member,integer:integer,distinct:distinct,subset:subset,partition:partition,nPartition:nPartition};const cVector=curry(vector);const cTuple=curry(tuple);const cArrayOf=curry(arrayOf);const cObjectOf=curry(objectOf);const guards=oMap(compose(output(bool)),oMap(inputs,{bool:cVector(1),num:cVector(1),integer:cVector(1),string:cVector(1),object:cVector(1),pojo:cVector(1),array:cVector(1),vector:cTuple([num,any]),fun:cVector(1),record:cTuple([cObjectOf(fun),any]),hasFields:cTuple([cObjectOf(fun),any]),tuple:cTuple([cArrayOf(fun),any]),objectOf:cTuple([fun,any]),arrayOf:cTuple([fun,any]),vectorOf:cTuple([num,fun,any]),matrixOf:cTuple([fun,any]),regExp:cVector(1),instanceOf:cTuple([fun,any]),any:cVector(1),member:cTuple([fun,array,any]),distinct:cTuple([fun,array]),subset:cTuple([fun,array,array]),partition:cTuple([fun,array,cArrayOf(array)]),nPartition:cTuple([fun,num,array,cArrayOf(array)])}));module.exports=oMap(curry,oAp(guards,api))})()},{"fun-curry":15,guarded:7}],7:[function(require,module,exports){(()=>{"use strict";const stringify=require("stringify-anything");const curry=require("fun-curry");const empty=as=>as.length===0;const isNum=x=>typeof x==="number";const isFun=x=>typeof x==="function";const objMap=(f,o)=>Object.keys(o).reduce((a,k)=>{a[k]=f(o[k]);return a},{});const show=x=>`\`${stringify(x)}\``;const toss=e=>{throw e};const preface="A contract with a guarded function has been broken!\n";const assert=(p,s,e)=>p(s)?s:toss(e);const setProp=(key,value,target)=>Object.defineProperty(target,key,Object.defineProperty(Object.getOwnPropertyDescriptor(target,key),"value",{value:value}));const nameAndLength=(from,to)=>setProp("length",from.length,setProp("name",from.name,to));const io=(p,f,...rest)=>{assert(isFun,p,Error(preface+`${show(p)} should be a function`));assert(isFun,f,Error(preface+`${show(f)} should be a function`));assert(empty,rest,Error(preface+`Extra arguments passed to io: ${show(rest)}`));return nameAndLength(f,(...input)=>{const output=f(...input);assert(curry(p)(input),output,Error(preface+`(inputs -> output) pair (${show(input)} ->`+` ${show(output)}) from function ${show(f)}`+` failed predicate ${show(p)}`));return output})};const inputs=(p,f,...rest)=>{assert(isFun,p,Error(preface+`${show(p)} should be a function`));assert(isFun,f,Error(preface+`${show(f)} should be a function`));assert(empty,rest,Error(preface+`Extra arguments passed to inputs: ${show(rest)}`));return nameAndLength(f,(...inputs)=>{assert(p,inputs,Error(preface+`inputs ${show(inputs)} to function ${show(f)}`+` failed predicate ${show(p)}`));return f(...inputs)})};const inputN=(i,p,f,...rest)=>{assert(isNum,i,Error(preface+`${show(i)} should be a number`));assert(isFun,p,Error(preface+`${show(p)} should be a function`));assert(isFun,f,Error(preface+`${show(f)} should be a function`));assert(empty,rest,Error(preface+`Extra arguments passed to inputN: ${show(rest)}`));return nameAndLength(f,(...inputs)=>{assert(p,inputs[i],Error(preface+`input ${i} ${show(inputs[i])} to function`+` ${show(f)} failed predicate ${show(p)}`));return f(...inputs)})};const input=(p,f,...rest)=>inputN(0,p,f,...rest);const output=(p,f,...rest)=>{assert(isFun,p,Error(preface+`${show(p)} should be a function`));assert(isFun,f,Error(preface+`${show(f)} should be a function`));assert(empty,rest,Error(preface+`Extra arguments passed to output: ${show(rest)}`));return nameAndLength(f,(...inputs)=>{const output=f(...inputs);assert(p,output,Error(preface+`output ${show(output)} of function ${show(f)}`+` with arguments ${show(inputs)} failed predicate ${show(p)}`));return output})};const api={io:io,inputs:inputs,inputN:inputN,input:input,output:output};module.exports=objMap(curry,api)})()},{"fun-curry":15,"stringify-anything":29}],8:[function(require,module,exports){(()=>{"use strict";const curry=require("fun-curry");const{inputs:inputs}=require("guarded");const{any:anything,vector:vector,vectorOf:vectorOf,tuple:tuple,array:array,arrayOf:arrayOf,fun:fun,num:num}=require("fun-type");const id=x=>x;const oAp=(fs,o)=>Object.keys(o).reduce((r,k)=>{r[k]=(fs[k]||id)(o[k]);return r},{});const oMap=(f,o)=>Object.keys(o).reduce((r,k)=>{r[k]=f(o[k]);return r},{});const not=curry((p,s)=>!p(s));const cata=(alg,xs)=>xs.reduce((a,b)=>alg([a,b]),alg([]));const fold=(combine,init,source)=>source.reduce(combine,init);const equal=(eq,a1,a2)=>a1.length===a2.length&&fold((a,b)=>a&&b,true,zipWith(eq,a1,a2));const spanPrefix=(p,a)=>split(takeWhilePrefix(p,a).length,a);const span=(p,a)=>[takeWhile(p,a),dropWhile(p,a)];const rightPad=(value,length,a)=>a.length>=length?a:a.concat(repeat(length-a.length,value));const leftPad=(value,length,a)=>a.length>=length?a:repeat(length-a.length,value).concat(a);const permute=a=>!a.length?a:a.length===1?[a]:flatten(a.map((e,i)=>map(a=>prepend(e,a),permute(remove(i,a)))));const cartesian=(a1,a2)=>flatten(map(i=>map(j=>[i,j],a2),a1));const cartesianN=as=>fold((r,a)=>map(([x,y])=>append(y,x),cartesian(r,a)),[[]],as);const flattenR=a=>unfold(flatten,b=>all(not(isArray),b),a);const isArray=a=>a instanceof Array;const flatMap=(f,xs)=>flatten(map(f,xs));const flatten=a=>fold(concat,[],a);const unfold=(next,stop,seed)=>{while(!stop(seed)){seed=next(seed)}return seed};const iterateN=(f,n,seed)=>unfold(xs=>append(f(last(xs)),xs),xs=>xs.length>=n,[seed]);const iterate=(f,stop,seed)=>unfold(xs=>append(f(last(xs)),xs),xs=>stop(last(xs)),[seed]);const sequence=(f,n)=>Array.apply(null,{length:n}).map((v,i)=>f(i));const repeat=(n,value)=>sequence(()=>value,n);const range=(first,last)=>sequence(n=>first+n,last-first+1);const index=n=>sequence(id,n);const any=(p,a)=>fold((r,v)=>r||p(v),false,a);const all=(p,a)=>fold((r,v)=>r&&p(v),true,a);const insert=(i,v,a)=>[...take(i,a),v,...drop(i,a)];const prepend=(v,a)=>[v,...a];const append=(v,a)=>[...a,v];const remove=(i,a)=>a.filter((x,j)=>i!==j);const contains=(v,source)=>source.indexOf(v)!==-1;const intersect=(a1,a2)=>unique(a1).filter(e=>contains(e,a2));const union=(a1,a2)=>unique(a1.concat(a2));const unique=a=>a.filter((v,i)=>a.indexOf(v)===i);const partition=(p,source)=>[filter(p,source),filter(not(p),source)];const dropWhile=(p,source)=>source.findIndex(not(p))===-1?[]:drop(source.findIndex(not(p)),source);const push=append;const pop=a=>take(a.length-1,a);const shift=a=>drop(1,a);const unshift=prepend;const popUnshift=a=>a[0].length?split(a[0].length-1,concat(a[0],a[1])):a;const pushShift=a=>a[1].length?split(a[0].length+1,concat(a[0],a[1])):a;const takeWhilePrefix=(p,source)=>{var results=[];for(var i=0;i<source.length;i++){if(!p(append(source[i],results)))return results;results.push(source[i])}return results};const take=(n,source)=>source.slice(0,n);const takeWhile=(p,source)=>source.findIndex(not(p))===-1?source:take(source.findIndex(not(p)),source);const drop=(n,source)=>source.slice(n);const slice=(from,to,source)=>source.slice(from,to);const split=(i,source)=>[take(i,source),drop(i,source)];const zipWith=(f,a1,a2)=>a1.map((v,i)=>f(v,a2[i]));const length=source=>source.length;const reIndex=(indices,a)=>map(x=>get(x,a),indices);const filter=(p,source)=>source.filter(x=>p(x));const ap=(fs,a)=>a.map((x,i)=>(fs[i]||id)(x));const map=(f,source)=>source.map(x=>f(x));const get=(index,source)=>source[index];const first=source=>get(0,source);const last=source=>get(source.length-1,source);const set=(i,v,a)=>a.map((x,j)=>j===i?v:x);const update=(index,f,source)=>set(index,f(get(index,source)),source);const concat=(a1,a2)=>a1.concat(a2);const empty=()=>[];const of=value=>[value];const from=arrayLike=>Array.prototype.slice.call(arrayLike);const reverse=array=>map(id,array).reverse();const sort=(comparator,array)=>map(id,array).sort(comparator);const api={permute:permute,length:length,reIndex:reIndex,of:of,from:from,empty:empty,concat:concat,map:map,ap:ap,get:get,set:set,update:update,filter:filter,reverse:reverse,sort:sort,zipWith:zipWith,fold:fold,take:take,takeWhile:takeWhile,drop:drop,dropWhile:dropWhile,slice:slice,split:split,partition:partition,unique:unique,union:union,intersect:intersect,contains:contains,insert:insert,remove:remove,append:append,prepend:prepend,all:all,any:any,index:index,range:range,repeat:repeat,sequence:sequence,last:last,first:first,unfold:unfold,iterate:iterate,iterateN:iterateN,cartesian:cartesian,cartesianN:cartesianN,flatten:flatten,flattenR:flattenR,isArray:isArray,leftPad:leftPad,rightPad:rightPad,span:span,spanPrefix:spanPrefix,push:push,pop:pop,shift:shift,unshift:unshift,pushShift:pushShift,popUnshift:popUnshift,takeWhilePrefix:takeWhilePrefix,equal:equal,flatMap:flatMap,cata:cata};const guards=oMap(inputs,{permute:tuple([array]),length:tuple([array]),reIndex:tuple([array,array]),of:vector(1),from:vector(1),concat:tuple([array,array]),map:tuple([fun,array]),ap:tuple([arrayOf(fun),array]),get:tuple([num,array]),set:tuple([num,anything,array]),update:tuple([num,fun,array]),filter:tuple([fun,array]),reverse:tuple([array]),sort:tuple([fun,array]),zipWith:tuple([fun,array,array]),fold:tuple([fun,anything,array]),take:tuple([num,array]),takeWhile:tuple([fun,array]),drop:tuple([num,array]),dropWhile:tuple([fun,array]),slice:tuple([num,num,array]),split:tuple([num,array]),partition:tuple([fun,array]),unique:tuple([array]),union:tuple([array,array]),intersect:tuple([array,array]),contains:tuple([anything,array]),insert:tuple([num,anything,array]),remove:tuple([num,array]),append:tuple([anything,array]),prepend:tuple([anything,array]),all:tuple([fun,array]),any:tuple([fun,array]),index:tuple([num]),range:tuple([num,num]),repeat:tuple([num,anything]),sequence:tuple([fun,num]),last:tuple([array]),first:tuple([array]),unfold:tuple([fun,fun,anything]),iterate:tuple([fun,fun,anything]),iterateN:tuple([fun,num,anything]),cartesian:tuple([array,array]),cartesianN:tuple([arrayOf(array)]),flatten:tuple([arrayOf(array)]),flattenR:tuple([array]),isArray:vector(1),leftPad:tuple([anything,num,array]),rightPad:tuple([anything,num,array]),span:tuple([fun,array]),spanPrefix:tuple([fun,array]),push:tuple([anything,array]),pop:tuple([array]),shift:tuple([array]),unshift:tuple([anything,array]),popUnshift:tuple([vectorOf(2,array)]),takeWhilePrefix:tuple([fun,array]),equal:tuple([fun,array,anything]),flatMap:tuple([fun,array]),cata:tuple([fun,array])});module.exports=oMap(curry,oAp(guards,api))})()},{"fun-curry":15,"fun-type":6,guarded:7}],9:[function(require,module,exports){(function(){"use strict";module.exports=stringify;function stringify(anything){if(isPrimitive(anything)){return JSON.stringify(anything)}if(anything===undefined){return"undefined"}if(anything instanceof Function){return anything.name?anything.name+"("+repeat(anything.length,"").join(",")+")":"("+repeat(anything.length,"").join(",")+")=>"}if(anything instanceof RegExp||anything instanceof Error){return anything.toString()}if(anything instanceof Array){return"["+anything.map(stringify).join(",")+"]"}if(anything instanceof Object){return"{"+zipWith(join,Object.keys(anything),values(anything).map(stringify)).join(",")+"}"}}function isPrimitive(x){return x===null||typeof x==="boolean"||typeof x==="number"||typeof x==="string"}function repeat(n,s){return Array.apply(null,{length:n}).map(function(){return s})}function zipWith(f,a1,a2){return a1.map(function(e,i){return f(e,a2[i])})}function values(object){return Object.keys(object).map(function(key){return object[key]})}function join(key,value){return key+":"+value}})()},{}],10:[function(require,module,exports){(function(){"use strict";var curry=require("fun-curry");var setProp=require("./lib/set-prop");var assert=require("./lib/assert");module.exports=curry(guarded);function guarded(inputsGuard,outputGuard,f){return setProp("length",f.length,setProp("name",f.name,function(){return assert(outputGuard,f.apply(null,assert(inputsGuard,Array.prototype.slice.call(arguments))))}))}})()},{"./lib/assert":11,"./lib/set-prop":12,"fun-curry":15}],11:[function(require,module,exports){(function(){"use strict";var stringify=require("stringify-anything");module.exports=assert;function assert(predicate,subject){if(!predicate(subject)){throw Error("!"+stringify(predicate)+"("+stringify(subject)+")")}return subject}})()},{"stringify-anything":9}],12:[function(require,module,exports){(function(){"use strict";module.exports=setProp;function setProp(key,value,target){return Object.defineProperty(target,key,Object.defineProperty(Object.getOwnPropertyDescriptor(target,key),"value",{value:value}))}})()},{}],13:[function(require,module,exports){(function(){"use strict";var curry=require("fun-curry");var guarded=require("guarded");var boolsToBool=guarded(allBools,isBoolean);var boolArrayToBool=guarded(isBoolArray,isBoolean);function isBoolArray(array){return array[0].map(isBoolean).reduce(and,true)}function allBools(array){return array.reduce(function(result,element){return result&&isBoolean(element)},true)}module.exports={and:curry(boolsToBool(and)),or:curry(boolsToBool(or)),not:boolsToBool(not),xor:curry(boolsToBool(xor)),t:t,f:f,truthy:truthy,falsey:falsey,isBoolean:isBoolean,equal:curry(boolsToBool(equal)),all:boolArrayToBool(all),any:boolArrayToBool(any),none:boolArrayToBool(none)};function none(bools){return all(bools.map(not))}function any(bools){return bools.reduce(or,false)}function all(bools){return bools.reduce(and,true)}function falsey(anything){return!anything}function truthy(anything){return!!anything}function isBoolean(anything){return typeof anything==="boolean"}function and(a,b){return a&&b}function or(a,b){return a||b}function not(b){return!b}function xor(a,b){return a!==b}function equal(a,b){return a===b}function t(){return true}function f(){return false}})()},{"fun-curry":15,guarded:10}],14:[function(require,module,exports){(()=>{"use strict";const isPrimitive=x=>x===null||typeof x==="boolean"||typeof x==="number"||typeof x==="string";const stringify=x=>isPrimitive(x)?JSON.stringify(x):x===undefined?"undefined":x instanceof Function?x.name||"=>":x instanceof RegExp||x instanceof Error?x.toString():x instanceof Array?`[${x.map(stringify).join(",")}]`:`{${Object.keys(x).join(",")}}`;module.exports=stringify})()},{}],15:[function(require,module,exports){(()=>{"use strict";const stringify=require("stringify-anything");const setProp=(key,value,x)=>Object.defineProperty(x,key,{value:value});const setName=(n,x)=>setProp("name",n,x);const setLength=(n,x)=>setProp("length",n,x);const toss=msg=>{throw Error(msg)};const checkInputs=(f,arity,args)=>{if(!(typeof f==="function")){toss(`${stringify(f)} should be a function`)}if(!(typeof arity==="number")){toss(`${stringify(arity)} should be a number`)}if(!(args instanceof Array)){toss(`${stringify(args)} should be an Array`)}};const partialName=(f,args)=>stringify(f)+(!args.length?"":`(${args.map(stringify).join(",")})`);const curry=(f,arity=f.length,args=[])=>{checkInputs(f,arity,args);return setName(partialName(f,args),setLength(arity,(...partialArgs)=>{const newArgs=args.concat(partialArgs.length?partialArgs:[undefined]);return newArgs.length>=arity?f.apply(null,newArgs):setLength(arity-newArgs.length,curry(f,arity,newArgs))}))};module.exports=curry})()},{"stringify-anything":14}],16:[function(require,module,exports){arguments[4][6][0].apply(exports,arguments)},{dup:6,"fun-curry":15,guarded:17}],17:[function(require,module,exports){arguments[4][7][0].apply(exports,arguments)},{dup:7,"fun-curry":15,"stringify-anything":29}],18:[function(require,module,exports){(()=>{"use strict";const curry=require("fun-curry");const{inputs:inputs}=require("guarded");const{any:any,tuple:tuple,arrayOf:arrayOf,objectOf:objectOf,fun:fun,string:string,object:object,record:record}=require("fun-type");const id=x=>x;const k=x=>()=>x;const zipWith=(f,o1,o2)=>keys(o1).reduce((r,k)=>set(k,f(get(k,o1),get(k,o2)),r),{});const transition=({output:output,f:f,inputs:inputs},o)=>set(output,f(keep(inputs,o)),o);const drop=(keys,o)=>filterKeys(k=>keys.indexOf(k)===-1,o);const keep=(keys,o)=>filterKeys(k=>keys.indexOf(k)!==-1,o);const reKey=(keyMap,o)=>apKeys(map(k,keyMap),o);const filter=(p,o)=>keys(o).reduce((r,k)=>p(get(k,o))?set(k,get(k,o),r):r,{});const filterKeys=(p,o)=>keys(o).reduce((r,k)=>p(k)?set(k,get(k,o),r):r,{});const apKeys=(fs,o)=>[...keys(fs),...keys(o)].reduce((r,k)=>set((get(k,fs)||id)(k),get(k,o),r),{});const ap=(fs,o)=>[...keys(fs),...keys(o)].reduce((r,k)=>set(k,(get(k,fs)||id)(get(k,o)),r),{});const map=(f,o)=>keys(o).reduce((r,k)=>set(k,f(get(k,o)),r),{});const mapKeys=(f,o)=>keys(o).reduce((r,k)=>set(f(k),get(k,o),r),{});const get=(key,o)=>o[key];const set=(key,value,o)=>[...keys(o),key].reduce((r,k)=>{r[k]=k===key?value:get(k,o);return r},{});const update=(key,f,o)=>set(key,f(get(key,o)),o);const defaults=(o1,o2)=>concat((a,b)=>b!==undefined?b:a,o1,o2);const merge=(o1,o2)=>defaults(o2,o1);const concat=(valueConcat,o1,o2)=>[...keys(o1),...keys(o2)].reduce((r,k)=>set(k,valueConcat(get(k,o1),get(k,o2)),r),{});const empty=()=>({});const ofPairs=pairs=>pairs.reduce((r,[k,v])=>set(k,v,r),{});const toPairs=o=>keys(o).map(k=>[k,get(k,o)]);const of=(key,value)=>({[key]:value});const values=o=>keys(o).map(k=>get(k,o));const keys=Object.keys;const api={keep:keep,drop:drop,keys:keys,values:values,reKey:reKey,of:of,ofPairs:ofPairs,empty:empty,concat:concat,defaults:defaults,merge:merge,map:map,mapKeys:mapKeys,ap:ap,apKeys:apKeys,get:get,set:set,update:update,filterKeys:filterKeys,filter:filter,transition:transition,zipWith:zipWith,toPairs:toPairs};const guards=map(inputs,{keep:tuple([arrayOf(string),object]),drop:tuple([arrayOf(string),object]),keys:tuple([object]),values:tuple([object]),reKey:tuple([objectOf(string),object]),of:tuple([string,any]),ofPairs:tuple([arrayOf(tuple([string,any]))]),concat:tuple([fun,object,object]),defaults:tuple([object,object]),merge:tuple([object,object]),map:tuple([fun,object]),mapKeys:tuple([fun,object]),ap:tuple([objectOf(fun),object]),apKeys:tuple([objectOf(fun),object]),get:tuple([string,object]),set:tuple([string,any,object]),update:tuple([string,fun,object]),filterKeys:tuple([fun,object]),filter:tuple([fun,object]),transition:tuple([record({inputs:arrayOf(string),f:fun,output:string}),object]),zipWith:tuple([fun,object,object]),toPairs:tuple([object])});module.exports=map(curry,ap(guards,api))})()},{"fun-curry":15,"fun-type":16,guarded:17}],19:[function(require,module,exports){arguments[4][7][0].apply(exports,arguments)},{dup:7,"fun-curry":15,"stringify-anything":29}],20:[function(require,module,exports){arguments[4][6][0].apply(exports,arguments)},{dup:6,"fun-curry":15,guarded:19}],21:[function(require,module,exports){arguments[4][7][0].apply(exports,arguments)},{dup:7,"fun-curry":15,"stringify-anything":29}],22:[function(require,module,exports){var apply,curry,flip,fix,over,memoize,slice$=[].slice,toString$={}.toString;apply=curry$(function(f,list){return f.apply(null,list)});curry=function(f){return curry$(f)};flip=curry$(function(f,x,y){return f(y,x)});fix=function(f){return function(g){return function(){return f(g(g)).apply(null,arguments)}}(function(g){return function(){return f(g(g)).apply(null,arguments)}})};over=curry$(function(f,g,x,y){return f(g(x),g(y))});memoize=function(f){var memo;memo={};return function(){var args,key,arg;args=slice$.call(arguments);key=function(){var i$,ref$,len$,results$=[];for(i$=0,len$=(ref$=args).length;i$<len$;++i$){arg=ref$[i$];results$.push(arg+toString$.call(arg).slice(8,-1))}return results$}().join("");return memo[key]=key in memo?memo[key]:f.apply(null,args)}};module.exports={curry:curry,flip:flip,fix:fix,apply:apply,over:over,memoize:memoize};function curry$(f,bound){var context,_curry=function(args){return f.length>1?function(){var params=args?args.concat():[];context=bound?context||this:this;return params.push.apply(params,arguments)<f.length&&arguments.length?_curry.call(context,params):f.apply(context,params)}:f};return _curry()}},{}],23:[function(require,module,exports){var each,map,compact,filter,reject,partition,find,head,first,tail,last,initial,empty,reverse,unique,uniqueBy,fold,foldl,fold1,foldl1,foldr,foldr1,unfoldr,concat,concatMap,flatten,difference,intersection,union,countBy,groupBy,andList,orList,any,all,sort,sortWith,sortBy,sum,product,mean,average,maximum,minimum,maximumBy,minimumBy,scan,scanl,scan1,scanl1,scanr,scanr1,slice,take,drop,splitAt,takeWhile,dropWhile,span,breakList,zip,zipWith,zipAll,zipAllWith,at,elemIndex,elemIndices,findIndex,findIndices,toString$={}.toString,slice$=[].slice;each=curry$(function(f,xs){var i$,len$,x;for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];f(x)}return xs});map=curry$(function(f,xs){var i$,len$,x,results$=[];for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];results$.push(f(x))}return results$});compact=function(xs){var i$,len$,x,results$=[];for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];if(x){results$.push(x)}}return results$};filter=curry$(function(f,xs){var i$,len$,x,results$=[];for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];if(f(x)){results$.push(x)}}return results$});reject=curry$(function(f,xs){var i$,len$,x,results$=[];for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];if(!f(x)){results$.push(x)}}return results$});partition=curry$(function(f,xs){var passed,failed,i$,len$,x;passed=[];failed=[];for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];(f(x)?passed:failed).push(x)}return[passed,failed]});find=curry$(function(f,xs){var i$,len$,x;for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];if(f(x)){return x}}});head=first=function(xs){return xs[0]};tail=function(xs){if(!xs.length){return}return xs.slice(1)};last=function(xs){return xs[xs.length-1]};initial=function(xs){if(!xs.length){return}return xs.slice(0,-1)};empty=function(xs){return!xs.length};reverse=function(xs){return xs.concat().reverse()};unique=function(xs){var result,i$,len$,x;result=[];for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];if(!in$(x,result)){result.push(x)}}return result};uniqueBy=curry$(function(f,xs){var seen,i$,len$,x,val,results$=[];seen=[];for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];val=f(x);if(in$(val,seen)){continue}seen.push(val);results$.push(x)}return results$});fold=foldl=curry$(function(f,memo,xs){var i$,len$,x;for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];memo=f(memo,x)}return memo});fold1=foldl1=curry$(function(f,xs){return fold(f,xs[0],xs.slice(1))});foldr=curry$(function(f,memo,xs){var i$,x;for(i$=xs.length-1;i$>=0;--i$){x=xs[i$];memo=f(x,memo)}return memo});foldr1=curry$(function(f,xs){return foldr(f,xs[xs.length-1],xs.slice(0,-1))});unfoldr=curry$(function(f,b){var result,x,that;result=[];x=b;while((that=f(x))!=null){result.push(that[0]);x=that[1]}return result});concat=function(xss){return[].concat.apply([],xss)};concatMap=curry$(function(f,xs){var x;return[].concat.apply([],function(){var i$,ref$,len$,results$=[];for(i$=0,len$=(ref$=xs).length;i$<len$;++i$){x=ref$[i$];results$.push(f(x))}return results$}())});flatten=function(xs){var x;return[].concat.apply([],function(){var i$,ref$,len$,results$=[];for(i$=0,len$=(ref$=xs).length;i$<len$;++i$){x=ref$[i$];if(toString$.call(x).slice(8,-1)==="Array"){results$.push(flatten(x))}else{results$.push(x)}}return results$}())};difference=function(xs){var yss,results,i$,len$,x,j$,len1$,ys;yss=slice$.call(arguments,1);results=[];outer:for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];for(j$=0,len1$=yss.length;j$<len1$;++j$){ys=yss[j$];if(in$(x,ys)){continue outer}}results.push(x)}return results};intersection=function(xs){var yss,results,i$,len$,x,j$,len1$,ys;yss=slice$.call(arguments,1);results=[];outer:for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];for(j$=0,len1$=yss.length;j$<len1$;++j$){ys=yss[j$];if(!in$(x,ys)){continue outer}}results.push(x)}return results};union=function(){var xss,results,i$,len$,xs,j$,len1$,x;xss=slice$.call(arguments);results=[];for(i$=0,len$=xss.length;i$<len$;++i$){xs=xss[i$];for(j$=0,len1$=xs.length;j$<len1$;++j$){x=xs[j$];if(!in$(x,results)){results.push(x)}}}return results};countBy=curry$(function(f,xs){var results,i$,len$,x,key;results={};for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];key=f(x);if(key in results){results[key]+=1}else{results[key]=1}}return results});groupBy=curry$(function(f,xs){var results,i$,len$,x,key;results={};for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];key=f(x);if(key in results){results[key].push(x)}else{results[key]=[x]}}return results});andList=function(xs){var i$,len$,x;for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];if(!x){return false}}return true};orList=function(xs){var i$,len$,x;for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];if(x){return true}}return false};any=curry$(function(f,xs){var i$,len$,x;for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];if(f(x)){return true}}return false});all=curry$(function(f,xs){var i$,len$,x;for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];if(!f(x)){return false}}return true});sort=function(xs){return xs.concat().sort(function(x,y){if(x>y){return 1}else if(x<y){return-1}else{return 0}})};sortWith=curry$(function(f,xs){return xs.concat().sort(f)});sortBy=curry$(function(f,xs){return xs.concat().sort(function(x,y){if(f(x)>f(y)){return 1}else if(f(x)<f(y)){return-1}else{return 0}})});sum=function(xs){var result,i$,len$,x;result=0;for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];result+=x}return result};product=function(xs){var result,i$,len$,x;result=1;for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];result*=x}return result};mean=average=function(xs){var sum,i$,len$,x;sum=0;for(i$=0,len$=xs.length;i$<len$;++i$){x=xs[i$];sum+=x}return sum/xs.length};maximum=function(xs){var max,i$,ref$,len$,x;max=xs[0];for(i$=0,len$=(ref$=xs.slice(1)).length;i$<len$;++i$){x=ref$[i$];if(x>max){max=x}}return max};minimum=function(xs){var min,i$,ref$,len$,x;min=xs[0];for(i$=0,len$=(ref$=xs.slice(1)).length;i$<len$;++i$){x=ref$[i$];if(x<min){min=x}}return min};maximumBy=curry$(function(f,xs){var max,i$,ref$,len$,x;max=xs[0];for(i$=0,len$=(ref$=xs.slice(1)).length;i$<len$;++i$){x=ref$[i$];if(f(x)>f(max)){max=x}}return max});minimumBy=curry$(function(f,xs){var min,i$,ref$,len$,x;min=xs[0];for(i$=0,len$=(ref$=xs.slice(1)).length;i$<len$;++i$){x=ref$[i$];if(f(x)<f(min)){min=x}}return min});scan=scanl=curry$(function(f,memo,xs){var last,x
;last=memo;return[memo].concat(function(){var i$,ref$,len$,results$=[];for(i$=0,len$=(ref$=xs).length;i$<len$;++i$){x=ref$[i$];results$.push(last=f(last,x))}return results$}())});scan1=scanl1=curry$(function(f,xs){if(!xs.length){return}return scan(f,xs[0],xs.slice(1))});scanr=curry$(function(f,memo,xs){xs=xs.concat().reverse();return scan(f,memo,xs).reverse()});scanr1=curry$(function(f,xs){if(!xs.length){return}xs=xs.concat().reverse();return scan(f,xs[0],xs.slice(1)).reverse()});slice=curry$(function(x,y,xs){return xs.slice(x,y)});take=curry$(function(n,xs){if(n<=0){return xs.slice(0,0)}else{return xs.slice(0,n)}});drop=curry$(function(n,xs){if(n<=0){return xs}else{return xs.slice(n)}});splitAt=curry$(function(n,xs){return[take(n,xs),drop(n,xs)]});takeWhile=curry$(function(p,xs){var len,i;len=xs.length;if(!len){return xs}i=0;while(i<len&&p(xs[i])){i+=1}return xs.slice(0,i)});dropWhile=curry$(function(p,xs){var len,i;len=xs.length;if(!len){return xs}i=0;while(i<len&&p(xs[i])){i+=1}return xs.slice(i)});span=curry$(function(p,xs){return[takeWhile(p,xs),dropWhile(p,xs)]});breakList=curry$(function(p,xs){return span(compose$(p,not$),xs)});zip=curry$(function(xs,ys){var result,len,i$,len$,i,x;result=[];len=ys.length;for(i$=0,len$=xs.length;i$<len$;++i$){i=i$;x=xs[i$];if(i===len){break}result.push([x,ys[i]])}return result});zipWith=curry$(function(f,xs,ys){var result,len,i$,len$,i,x;result=[];len=ys.length;for(i$=0,len$=xs.length;i$<len$;++i$){i=i$;x=xs[i$];if(i===len){break}result.push(f(x,ys[i]))}return result});zipAll=function(){var xss,minLength,i$,len$,xs,ref$,i,lresult$,j$,results$=[];xss=slice$.call(arguments);minLength=undefined;for(i$=0,len$=xss.length;i$<len$;++i$){xs=xss[i$];minLength<=(ref$=xs.length)||(minLength=ref$)}for(i$=0;i$<minLength;++i$){i=i$;lresult$=[];for(j$=0,len$=xss.length;j$<len$;++j$){xs=xss[j$];lresult$.push(xs[i])}results$.push(lresult$)}return results$};zipAllWith=function(f){var xss,minLength,i$,len$,xs,ref$,i,results$=[];xss=slice$.call(arguments,1);minLength=undefined;for(i$=0,len$=xss.length;i$<len$;++i$){xs=xss[i$];minLength<=(ref$=xs.length)||(minLength=ref$)}for(i$=0;i$<minLength;++i$){i=i$;results$.push(f.apply(null,fn$()))}return results$;function fn$(){var i$,ref$,len$,results$=[];for(i$=0,len$=(ref$=xss).length;i$<len$;++i$){xs=ref$[i$];results$.push(xs[i])}return results$}};at=curry$(function(n,xs){if(n<0){return xs[xs.length+n]}else{return xs[n]}});elemIndex=curry$(function(el,xs){var i$,len$,i,x;for(i$=0,len$=xs.length;i$<len$;++i$){i=i$;x=xs[i$];if(x===el){return i}}});elemIndices=curry$(function(el,xs){var i$,len$,i,x,results$=[];for(i$=0,len$=xs.length;i$<len$;++i$){i=i$;x=xs[i$];if(x===el){results$.push(i)}}return results$});findIndex=curry$(function(f,xs){var i$,len$,i,x;for(i$=0,len$=xs.length;i$<len$;++i$){i=i$;x=xs[i$];if(f(x)){return i}}});findIndices=curry$(function(f,xs){var i$,len$,i,x,results$=[];for(i$=0,len$=xs.length;i$<len$;++i$){i=i$;x=xs[i$];if(f(x)){results$.push(i)}}return results$});module.exports={each:each,map:map,filter:filter,compact:compact,reject:reject,partition:partition,find:find,head:head,first:first,tail:tail,last:last,initial:initial,empty:empty,reverse:reverse,difference:difference,intersection:intersection,union:union,countBy:countBy,groupBy:groupBy,fold:fold,fold1:fold1,foldl:foldl,foldl1:foldl1,foldr:foldr,foldr1:foldr1,unfoldr:unfoldr,andList:andList,orList:orList,any:any,all:all,unique:unique,uniqueBy:uniqueBy,sort:sort,sortWith:sortWith,sortBy:sortBy,sum:sum,product:product,mean:mean,average:average,concat:concat,concatMap:concatMap,flatten:flatten,maximum:maximum,minimum:minimum,maximumBy:maximumBy,minimumBy:minimumBy,scan:scan,scan1:scan1,scanl:scanl,scanl1:scanl1,scanr:scanr,scanr1:scanr1,slice:slice,take:take,drop:drop,splitAt:splitAt,takeWhile:takeWhile,dropWhile:dropWhile,span:span,breakList:breakList,zip:zip,zipWith:zipWith,zipAll:zipAll,zipAllWith:zipAllWith,at:at,elemIndex:elemIndex,elemIndices:elemIndices,findIndex:findIndex,findIndices:findIndices};function curry$(f,bound){var context,_curry=function(args){return f.length>1?function(){var params=args?args.concat():[];context=bound?context||this:this;return params.push.apply(params,arguments)<f.length&&arguments.length?_curry.call(context,params):f.apply(context,params)}:f};return _curry()}function in$(x,xs){var i=-1,l=xs.length>>>0;while(++i<l)if(x===xs[i])return true;return false}function compose$(){var functions=arguments;return function(){var i,result;result=functions[0].apply(this,arguments);for(i=1;i<functions.length;++i){result=functions[i](result)}return result}}function not$(x){return!x}},{}],24:[function(require,module,exports){var max,min,negate,abs,signum,quot,rem,div,mod,recip,pi,tau,exp,sqrt,ln,pow,sin,tan,cos,asin,acos,atan,atan2,truncate,round,ceiling,floor,isItNaN,even,odd,gcd,lcm;max=curry$(function(x$,y$){return x$>y$?x$:y$});min=curry$(function(x$,y$){return x$<y$?x$:y$});negate=function(x){return-x};abs=Math.abs;signum=function(x){if(x<0){return-1}else if(x>0){return 1}else{return 0}};quot=curry$(function(x,y){return~~(x/y)});rem=curry$(function(x$,y$){return x$%y$});div=curry$(function(x,y){return Math.floor(x/y)});mod=curry$(function(x$,y$){var ref$;return(x$%(ref$=y$)+ref$)%ref$});recip=function(it){return 1/it};pi=Math.PI;tau=pi*2;exp=Math.exp;sqrt=Math.sqrt;ln=Math.log;pow=curry$(function(x$,y$){return Math.pow(x$,y$)});sin=Math.sin;tan=Math.tan;cos=Math.cos;asin=Math.asin;acos=Math.acos;atan=Math.atan;atan2=curry$(function(x,y){return Math.atan2(x,y)});truncate=function(x){return~~x};round=Math.round;ceiling=Math.ceil;floor=Math.floor;isItNaN=function(x){return x!==x};even=function(x){return x%2===0};odd=function(x){return x%2!==0};gcd=curry$(function(x,y){var z;x=Math.abs(x);y=Math.abs(y);while(y!==0){z=x%y;x=y;y=z}return x});lcm=curry$(function(x,y){return Math.abs(Math.floor(x/gcd(x,y)*y))});module.exports={max:max,min:min,negate:negate,abs:abs,signum:signum,quot:quot,rem:rem,div:div,mod:mod,recip:recip,pi:pi,tau:tau,exp:exp,sqrt:sqrt,ln:ln,pow:pow,sin:sin,tan:tan,cos:cos,acos:acos,asin:asin,atan:atan,atan2:atan2,truncate:truncate,round:round,ceiling:ceiling,floor:floor,isItNaN:isItNaN,even:even,odd:odd,gcd:gcd,lcm:lcm};function curry$(f,bound){var context,_curry=function(args){return f.length>1?function(){var params=args?args.concat():[];context=bound?context||this:this;return params.push.apply(params,arguments)<f.length&&arguments.length?_curry.call(context,params):f.apply(context,params)}:f};return _curry()}},{}],25:[function(require,module,exports){var values,keys,pairsToObj,objToPairs,listsToObj,objToLists,empty,each,map,compact,filter,reject,partition,find;values=function(object){var i$,x,results$=[];for(i$ in object){x=object[i$];results$.push(x)}return results$};keys=function(object){var x,results$=[];for(x in object){results$.push(x)}return results$};pairsToObj=function(object){var i$,len$,x,resultObj$={};for(i$=0,len$=object.length;i$<len$;++i$){x=object[i$];resultObj$[x[0]]=x[1]}return resultObj$};objToPairs=function(object){var key,value,results$=[];for(key in object){value=object[key];results$.push([key,value])}return results$};listsToObj=curry$(function(keys,values){var i$,len$,i,key,resultObj$={};for(i$=0,len$=keys.length;i$<len$;++i$){i=i$;key=keys[i$];resultObj$[key]=values[i]}return resultObj$});objToLists=function(object){var keys,values,key,value;keys=[];values=[];for(key in object){value=object[key];keys.push(key);values.push(value)}return[keys,values]};empty=function(object){var x;for(x in object){return false}return true};each=curry$(function(f,object){var i$,x;for(i$ in object){x=object[i$];f(x)}return object});map=curry$(function(f,object){var k,x,resultObj$={};for(k in object){x=object[k];resultObj$[k]=f(x)}return resultObj$});compact=function(object){var k,x,resultObj$={};for(k in object){x=object[k];if(x){resultObj$[k]=x}}return resultObj$};filter=curry$(function(f,object){var k,x,resultObj$={};for(k in object){x=object[k];if(f(x)){resultObj$[k]=x}}return resultObj$});reject=curry$(function(f,object){var k,x,resultObj$={};for(k in object){x=object[k];if(!f(x)){resultObj$[k]=x}}return resultObj$});partition=curry$(function(f,object){var passed,failed,k,x;passed={};failed={};for(k in object){x=object[k];(f(x)?passed:failed)[k]=x}return[passed,failed]});find=curry$(function(f,object){var i$,x;for(i$ in object){x=object[i$];if(f(x)){return x}}});module.exports={values:values,keys:keys,pairsToObj:pairsToObj,objToPairs:objToPairs,listsToObj:listsToObj,objToLists:objToLists,empty:empty,each:each,map:map,filter:filter,compact:compact,reject:reject,partition:partition,find:find};function curry$(f,bound){var context,_curry=function(args){return f.length>1?function(){var params=args?args.concat():[];context=bound?context||this:this;return params.push.apply(params,arguments)<f.length&&arguments.length?_curry.call(context,params):f.apply(context,params)}:f};return _curry()}},{}],26:[function(require,module,exports){var split,join,lines,unlines,words,unwords,chars,unchars,reverse,repeat,capitalize,camelize,dasherize;split=curry$(function(sep,str){return str.split(sep)});join=curry$(function(sep,xs){return xs.join(sep)});lines=function(str){if(!str.length){return[]}return str.split("\n")};unlines=function(it){return it.join("\n")};words=function(str){if(!str.length){return[]}return str.split(/[ ]+/)};unwords=function(it){return it.join(" ")};chars=function(it){return it.split("")};unchars=function(it){return it.join("")};reverse=function(str){return str.split("").reverse().join("")};repeat=curry$(function(n,str){var result,i$;result="";for(i$=0;i$<n;++i$){result+=str}return result});capitalize=function(str){return str.charAt(0).toUpperCase()+str.slice(1)};camelize=function(it){return it.replace(/[-_]+(.)?/g,function(arg$,c){return(c!=null?c:"").toUpperCase()})};dasherize=function(str){return str.replace(/([^-A-Z])([A-Z]+)/g,function(arg$,lower,upper){return lower+"-"+(upper.length>1?upper:upper.toLowerCase())}).replace(/^([A-Z]+)/,function(arg$,upper){if(upper.length>1){return upper+"-"}else{return upper.toLowerCase()}})};module.exports={split:split,join:join,lines:lines,unlines:unlines,words:words,unwords:unwords,chars:chars,unchars:unchars,reverse:reverse,repeat:repeat,capitalize:capitalize,camelize:camelize,dasherize:dasherize};function curry$(f,bound){var context,_curry=function(args){return f.length>1?function(){var params=args?args.concat():[];context=bound?context||this:this;return params.push.apply(params,arguments)<f.length&&arguments.length?_curry.call(context,params):f.apply(context,params)}:f};return _curry()}},{}],27:[function(require,module,exports){var Func,List,Obj,Str,Num,id,isType,replicate,prelude,toString$={}.toString;Func=require("./Func.js");List=require("./List.js");Obj=require("./Obj.js");Str=require("./Str.js");Num=require("./Num.js");id=function(x){return x};isType=curry$(function(type,x){return toString$.call(x).slice(8,-1)===type});replicate=curry$(function(n,x){var i$,results$=[];for(i$=0;i$<n;++i$){results$.push(x)}return results$});Str.empty=List.empty;Str.slice=List.slice;Str.take=List.take;Str.drop=List.drop;Str.splitAt=List.splitAt;Str.takeWhile=List.takeWhile;Str.dropWhile=List.dropWhile;Str.span=List.span;Str.breakStr=List.breakList;prelude={Func:Func,List:List,Obj:Obj,Str:Str,Num:Num,id:id,isType:isType,replicate:replicate};prelude.each=List.each;prelude.map=List.map;prelude.filter=List.filter;prelude.compact=List.compact;prelude.reject=List.reject;prelude.partition=List.partition;prelude.find=List.find;prelude.head=List.head;prelude.first=List.first;prelude.tail=List.tail;prelude.last=List.last;prelude.initial=List.initial;prelude.empty=List.empty;prelude.reverse=List.reverse;prelude.difference=List.difference;prelude.intersection=List.intersection;prelude.union=List.union;prelude.countBy=List.countBy;prelude.groupBy=List.groupBy;prelude.fold=List.fold;prelude.foldl=List.foldl;prelude.fold1=List.fold1;prelude.foldl1=List.foldl1;prelude.foldr=List.foldr;prelude.foldr1=List.foldr1;prelude.unfoldr=List.unfoldr;prelude.andList=List.andList;prelude.orList=List.orList;prelude.any=List.any;prelude.all=List.all;prelude.unique=List.unique;prelude.uniqueBy=List.uniqueBy;prelude.sort=List.sort;prelude.sortWith=List.sortWith;prelude.sortBy=List.sortBy;prelude.sum=List.sum;prelude.product=List.product;prelude.mean=List.mean;prelude.average=List.average;prelude.concat=List.concat;prelude.concatMap=List.concatMap;prelude.flatten=List.flatten;prelude.maximum=List.maximum;prelude.minimum=List.minimum;prelude.maximumBy=List.maximumBy;prelude.minimumBy=List.minimumBy;prelude.scan=List.scan;prelude.scanl=List.scanl;prelude.scan1=List.scan1;prelude.scanl1=List.scanl1;prelude.scanr=List.scanr;prelude.scanr1=List.scanr1;prelude.slice=List.slice;prelude.take=List.take;prelude.drop=List.drop;prelude.splitAt=List.splitAt;prelude.takeWhile=List.takeWhile;prelude.dropWhile=List.dropWhile;prelude.span=List.span;prelude.breakList=List.breakList;prelude.zip=List.zip;prelude.zipWith=List.zipWith;prelude.zipAll=List.zipAll;prelude.zipAllWith=List.zipAllWith;prelude.at=List.at;prelude.elemIndex=List.elemIndex;prelude.elemIndices=List.elemIndices;prelude.findIndex=List.findIndex;prelude.findIndices=List.findIndices;prelude.apply=Func.apply;prelude.curry=Func.curry;prelude.flip=Func.flip;prelude.fix=Func.fix;prelude.over=Func.over;prelude.split=Str.split;prelude.join=Str.join;prelude.lines=Str.lines;prelude.unlines=Str.unlines;prelude.words=Str.words;prelude.unwords=Str.unwords;prelude.chars=Str.chars;prelude.unchars=Str.unchars;prelude.repeat=Str.repeat;prelude.capitalize=Str.capitalize;prelude.camelize=Str.camelize;prelude.dasherize=Str.dasherize;prelude.values=Obj.values;prelude.keys=Obj.keys;prelude.pairsToObj=Obj.pairsToObj;prelude.objToPairs=Obj.objToPairs;prelude.listsToObj=Obj.listsToObj;prelude.objToLists=Obj.objToLists;prelude.max=Num.max;prelude.min=Num.min;prelude.negate=Num.negate;prelude.abs=Num.abs;prelude.signum=Num.signum;prelude.quot=Num.quot;prelude.rem=Num.rem;prelude.div=Num.div;prelude.mod=Num.mod;prelude.recip=Num.recip;prelude.pi=Num.pi;prelude.tau=Num.tau;prelude.exp=Num.exp;prelude.sqrt=Num.sqrt;prelude.ln=Num.ln;prelude.pow=Num.pow;prelude.sin=Num.sin;prelude.tan=Num.tan;prelude.cos=Num.cos;prelude.acos=Num.acos;prelude.asin=Num.asin;prelude.atan=Num.atan;prelude.atan2=Num.atan2;prelude.truncate=Num.truncate;prelude.round=Num.round;prelude.ceiling=Num.ceiling;prelude.floor=Num.floor;prelude.isItNaN=Num.isItNaN;prelude.even=Num.even;prelude.odd=Num.odd;prelude.gcd=Num.gcd;prelude.lcm=Num.lcm;prelude.VERSION="1.1.2";module.exports=prelude;function curry$(f,bound){var context,_curry=function(args){return f.length>1?function(){var params=args?args.concat():[];context=bound?context||this:this;return params.push.apply(params,arguments)<f.length&&arguments.length?_curry.call(context,params):f.apply(context,params)}:f};return _curry()}},{"./Func.js":22,"./List.js":23,"./Num.js":24,"./Obj.js":25,"./Str.js":26}],28:[function(require,module,exports){(function(){"use strict";module.exports=setProp;function setProp(key,value,target){if(typeof key!=="string"){throw Error(key+" should be a string")}if(!validTarget(target)){throw Error(target+" should be an Array | Function | Object")}return Object.defineProperty(target,key,{value:value})}function validTarget(target){return target instanceof Array||target instanceof Function||target instanceof Object}})()},{}],29:[function(require,module,exports){arguments[4][14][0].apply(exports,arguments)},{dup:14}],30:[function(require,module,exports){(function(){var ref$,any,all,isItNaN,types,defaultType,customTypes,toString$={}.toString;ref$=require("prelude-ls"),any=ref$.any,all=ref$.all,isItNaN=ref$.isItNaN;types={Number:{typeOf:"Number",validate:function(it){return!isItNaN(it)}},NaN:{typeOf:"Number",validate:isItNaN},Int:{typeOf:"Number",validate:function(it){return!isItNaN(it)&&it%1===0}},Float:{typeOf:"Number",validate:function(it){return!isItNaN(it)}},Date:{typeOf:"Date",validate:function(it){return!isItNaN(it.getTime())}}};defaultType={array:"Array",tuple:"Array"};function checkArray(input,type){return all(function(it){return checkMultiple(it,type.of)},input)}function checkTuple(input,type){var i,i$,ref$,len$,types;i=0;for(i$=0,len$=(ref$=type.of).length;i$<len$;++i$){types=ref$[i$];if(!checkMultiple(input[i],types)){return false}i++}return input.length<=i}function checkFields(input,type){var inputKeys,numInputKeys,k,numOfKeys,key,ref$,types;inputKeys={};numInputKeys=0;for(k in input){inputKeys[k]=true;numInputKeys++}numOfKeys=0;for(key in ref$=type.of){types=ref$[key];if(!checkMultiple(input[key],types)){return false}if(inputKeys[key]){numOfKeys++}}return type.subset||numInputKeys===numOfKeys}function checkStructure(input,type){if(!(input instanceof Object)){return false}switch(type.structure){case"fields":return checkFields(input,type);case"array":return checkArray(input,type);case"tuple":return checkTuple(input,type)}}function check(input,typeObj){var type,structure,setting,that;type=typeObj.type,structure=typeObj.structure;if(type){if(type==="*"){return true}setting=customTypes[type]||types[type];if(setting){return setting.typeOf===toString$.call(input).slice(8,-1)&&setting.validate(input)}else{return type===toString$.call(input).slice(8,-1)&&(!structure||checkStructure(input,typeObj))}}else if(structure){if(that=defaultType[structure]){if(that!==toString$.call(input).slice(8,-1)){return false}}return checkStructure(input,typeObj)}else{throw new Error("No type defined. Input: "+input+".")}}function checkMultiple(input,types){if(toString$.call(types).slice(8,-1)!=="Array"){throw new Error("Types must be in an array. Input: "+input+".")}return any(function(it){return check(input,it)},types)}module.exports=function(parsedType,input,options){options==null&&(options={});customTypes=options.customTypes||{};return checkMultiple(input,parsedType)}}).call(this)},{"prelude-ls":27}],31:[function(require,module,exports){(function(){var VERSION,parseType,parsedTypeCheck,typeCheck;VERSION="0.3.2";parseType=require("./parse-type");parsedTypeCheck=require("./check");typeCheck=function(type,input,options){return parsedTypeCheck(parseType(type),input,options)};module.exports={VERSION:VERSION,typeCheck:typeCheck,parsedTypeCheck:parsedTypeCheck,parseType:parseType}}).call(this)},{"./check":30,"./parse-type":32}],32:[function(require,module,exports){(function(){var identifierRegex,tokenRegex;identifierRegex=/[\$\w]+/;function peek(tokens){var token;token=tokens[0];if(token==null){throw new Error("Unexpected end of input.")}return token}function consumeIdent(tokens){var token;token=peek(tokens);if(!identifierRegex.test(token)){throw new Error("Expected text, got '"+token+"' instead.")}return tokens.shift()}function consumeOp(tokens,op){var token;token=peek(tokens);if(token!==op){throw new Error("Expected '"+op+"', got '"+token+"' instead.")}return tokens.shift()}function maybeConsumeOp(tokens,op){var token;token=tokens[0];if(token===op){return tokens.shift()}else{return null}}function consumeArray(tokens){var types;consumeOp(tokens,"[");if(peek(tokens)==="]"){throw new Error("Must specify type of Array - eg. [Type], got [] instead.")}types=consumeTypes(tokens);consumeOp(tokens,"]");return{structure:"array",of:types}}function consumeTuple(tokens){var components;components=[];consumeOp(tokens,"(");if(peek(tokens)===")"){throw new Error("Tuple must be of at least length 1 - eg. (Type), got () instead.")}for(;;){components.push(consumeTypes(tokens));maybeConsumeOp(tokens,",");if(")"===peek(tokens)){break}}consumeOp(tokens,")");return{structure:"tuple",of:components}}function consumeFields(tokens){var fields,subset,ref$,key,types;fields={};consumeOp(tokens,"{");subset=false;for(;;){if(maybeConsumeOp(tokens,"...")){subset=true;break}ref$=consumeField(tokens),key=ref$[0],types=ref$[1];fields[key]=types;maybeConsumeOp(tokens,",");if("}"===peek(tokens)){break}}consumeOp(tokens,"}");return{structure:"fields",of:fields,subset:subset}}function consumeField(tokens){var key,types;key=consumeIdent(tokens);consumeOp(tokens,":");types=consumeTypes(tokens);return[key,types]}function maybeConsumeStructure(tokens){switch(tokens[0]){case"[":return consumeArray(tokens);case"(":return consumeTuple(tokens);case"{":return consumeFields(tokens)}}function consumeType(tokens){var token,wildcard,type,structure;token=peek(tokens);wildcard=token==="*";if(wildcard||identifierRegex.test(token)){type=wildcard?consumeOp(tokens,"*"):consumeIdent(tokens);structure=maybeConsumeStructure(tokens);if(structure){return structure.type=type,structure}else{return{type:type}}}else{structure=maybeConsumeStructure(tokens);if(!structure){throw new Error("Unexpected character: "+token)}return structure}}function consumeTypes(tokens){var lookahead,types,typesSoFar,typeObj,type;if("::"===peek(tokens)){throw new Error("No comment before comment separator '::' found.")}lookahead=tokens[1];if(lookahead!=null&&lookahead==="::"){tokens.shift();tokens.shift()}types=[];typesSoFar={};if("Maybe"===peek(tokens)){tokens.shift();types=[{type:"Undefined"},{type:"Null"}];typesSoFar={Undefined:true,Null:true}}for(;;){typeObj=consumeType(tokens),type=typeObj.type;if(!typesSoFar[type]){types.push(typeObj)}typesSoFar[type]=true;if(!maybeConsumeOp(tokens,"|")){break}}return types}tokenRegex=RegExp("\\.\\.\\.|::|->|"+identifierRegex.source+"|\\S","g");module.exports=function(input){var tokens,e;if(!input.length){throw new Error("No type specified.")}tokens=input.match(tokenRegex)||[];if(in$("->",tokens)){throw new Error("Function types are not supported. To validate that something is a function, you may use 'Function'.")}try{return consumeTypes(tokens)}catch(e$){e=e$;throw new Error(e.message+" - Remaining tokens: "+JSON.stringify(tokens)+" - Initial input: '"+input+"'")}};function in$(x,xs){var i=-1,l=xs.length>>>0;while(++i<l)if(x===xs[i])return true;return false}}).call(this)},{}],33:[function(require,module,exports){(()=>{"use strict";const{inputs:inputs,output:output}=require("guarded");const{any:any,bool:bool,string:string,fun:fun,regExp:regExp,arrayOf:arrayOf,tuple:tuple}=require("fun-type");const{fold:fold,map:map,repeat:repeat}=require("fun-array");const typeCheck=require("type-check").typeCheck;const deepEqual=require("deep-equal");const{not:bNot,xor:bXor,or:bOr,and:bAnd}=require("fun-boolean");const curry=require("fun-curry");const apply=require("fun-apply");const setProp=require("set-prop");const stringify=require("stringify-anything");const{map:oMap,ap:oAp}=require("fun-object");const compose=(f,g)=>(...args)=>f(apply(args,g));const lift=f=>curry(setProp("name",`lift(${stringify(f)})`,(...args)=>{const fs=args.slice(0,f.length);return curry(setProp("name",`lift(${stringify(f)})(${fs.map(stringify).join(",")})`,(...args)=>apply(fs.map(apply(args)),f)),fs[0].length)}),f.length);const ifThenElse=(predicate,ifTrue,ifFalse,subject)=>predicate(subject)?ifTrue(subject):ifFalse(subject);const match=(regex,subject)=>regex.test(subject);const falsey=subject=>!subject;const truthy=subject=>!!subject;const equal=(reference,subject)=>subject===reference;const equalDeep=(reference,subject)=>deepEqual(reference,subject);const throwsWith=(inputs,f)=>{try{f.apply(null,inputs);return false}catch(error){return true}};const type=(type,subject)=>typeCheck(type,subject);const t=()=>true;const f=()=>false;const not=lift(bNot);const xnor=lift(equal);const xor=lift(bXor);const or=lift(bOr);const and=lift(bAnd);const implies=(p,q)=>or(not(p),q);const all=fold(and,t);const some=fold(or,f);const none=compose(all,map(not));const api={and:and,implies:implies,or:or,xor:xor,xnor:xnor,all:all,some:some,none:none,not:not,t:t,f:f,truthy:truthy,falsey:falsey,equal:equal,equalDeep:equalDeep,type:type,match:match,throwsWith:throwsWith,ifThenElse:ifThenElse};const nFuns=n=>tuple(repeat(n,fun));const guards={and:compose(output(fun),inputs(nFuns(2))),implies:compose(output(fun),inputs(nFuns(2))),or:compose(output(fun),inputs(nFuns(2))),xor:compose(output(fun),inputs(nFuns(2))),xnor:compose(output(fun),inputs(nFuns(2))),all:compose(output(fun),inputs(tuple([arrayOf(fun)]))),some:compose(output(fun),inputs(tuple([arrayOf(fun)]))),none:compose(output(fun),inputs(tuple([arrayOf(fun)]))),not:compose(output(fun),inputs(nFuns(1))),truthy:compose(output(bool),inputs(tuple([any]))),falsey:compose(output(bool),inputs(tuple([any]))),equal:compose(output(bool),inputs(tuple([any,any]))),equalDeep:compose(output(bool),inputs(tuple([any,any]))),type:compose(output(bool),inputs(tuple([string,any]))),match:compose(output(bool),inputs(tuple([regExp,string]))),throwsWith:compose(output(bool),inputs(tuple([arrayOf(any),fun]))),ifThenElse:inputs(tuple([fun,fun,fun,any]))};module.exports=oMap(curry,oAp(guards,api))})()},{"deep-equal":2,"fun-apply":5,"fun-array":8,"fun-boolean":13,"fun-curry":15,"fun-object":18,"fun-type":20,guarded:21,"set-prop":28,"stringify-anything":29,"type-check":31}]},{},[1]);
